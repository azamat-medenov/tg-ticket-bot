import logging
import json
import atexit
import asyncio
import aioschedule as schedule
from config.config import TOKEN, REMINDER_INTERVAL
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message


logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
active_tickets = {}
scheduled_jobs = {}

# --- –°–µ—Ä–≤–∏—Å—ã ---------------------------------------------------------

# –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞
def load_tickets():
    global active_tickets
    try:
        with open("tickets.json", "r") as file:
            active_tickets = json.load(file)
        logging.info("Tickets loaded successfully.")
    except FileNotFoundError:
        active_tickets = {}
        logging.info("No tickets file found. Starting fresh.")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –≤ —Ñ–∞–π–ª
def save_tickets():
    try:
        with open("tickets.json", "w") as file:
            json.dump(active_tickets, file, indent=4, ensure_ascii=False)
        logging.info("Tickets saved successfully.")
    except Exception as e:
        logging.error(f"Error saving tickets: {e}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫
def load_scheduler_jobs():
    for ticket_number in active_tickets:
        schedule_reminder(ticket_number)
        logging.info(f"Task for ticket {ticket_number} restored.")

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
def schedule_reminder(ticket_number):
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–µ –≤ —Å–ª–æ–≤–∞—Ä–µ
    job = schedule.every(REMINDER_INTERVAL).seconds.do(
        lambda: asyncio.create_task(send_reminder(ticket_number))
    )
    scheduled_jobs[ticket_number] = job
    logging.info(f"Reminder scheduled for ticket {ticket_number}.")

# –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def remove_reminder(ticket_number):
    job = scheduled_jobs.pop(ticket_number, None)
    if job:
        schedule.cancel_job(job)
        logging.info(f"Reminder for ticket {ticket_number} removed.")
    else:
        logging.warning(f"No reminder found for ticket {ticket_number}.")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_reminder(ticket_number: str):
    try:
        logging.info(f"send_reminder called for ticket {ticket_number}")
        ticket = active_tickets.get(ticket_number)
        if ticket:
            ticket["remind_times"] += 1
            elapsed_time = timedelta(seconds=ticket["remind_times"] * REMINDER_INTERVAL)
            start_time = datetime.strptime(ticket["start_time"], '%H:%M %d.%m.%Y')

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.send_message(
                chat_id=ticket["chat_id"],
                text=f"Reminder: Ticket {ticket_number} opened {elapsed_time} "
                     f"({start_time.strftime('%H:%M %d.%m.%Y')})",
                reply_to_message_id=ticket["message_id"]  # –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            )
            logging.info(f"Reminder sent for ticket {ticket_number}")
    except Exception as e:
        logging.error(f"Error in send_reminder for ticket {ticket_number}: {e}")




# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---------------------------------------------------------

@router.message()
async def handle_message(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –≥—Ä—É–ø–ø—ã –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
    if message.chat.type in ["group", "supergroup"]:
        logging.info(f"Message received from the group: {message.chat.title} | {message.text}")

        now = datetime.now().strftime('%H:%M %d.%m.%Y')
        chat_id = message.chat.id
        # –ü—Ä–∏–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∫ –µ–¥–∏–Ω–æ–º—É –≤–∏–¥—É, —É–¥–∞–ª—è—è –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        message_text = message.text.strip().lower()

        # –û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É
        if "ticket open" in message_text:
            logging.info(f"{datetime.now().strftime('%H:%M %d.%m.%Y')}: Method \"ticket open\" triggered")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
            try:
                ticket_number = message_text.split("ticket open")[1].split()[0]
            except IndexError as e:
                logging.error(f"Failed to extract ticket number: {e}")
                await message.reply("–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∑–∞—è–≤–∫–∞
            if ticket_number in active_tickets:
                logging.warning(f"Ticket {ticket_number} already exists.")
                await message.reply(f"Ticket {ticket_number} already exists.")
                return

            active_tickets[ticket_number] = {
                "chat_id": chat_id,
                "message_id": message.message_id,
                "start_time": now,
                "remind_times": 0
            }
            save_tickets()
            schedule_reminder(ticket_number)
            await message.reply(f"Ticket {ticket_number} was open ({now})")

        # –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É
        if "ticket close" in message_text:
            logging.info(f"{datetime.now().strftime('%H:%M %d.%m.%Y')}: Method \"ticket close\" triggered")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
            try:
                ticket_number = message_text.split("ticket close")[1].split()[0]
            except IndexError:
                await message.reply("I can't recognize the application number. Try again.")
                return

            if ticket_number in active_tickets:
                ticket = active_tickets[ticket_number]
                try:
                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ticket open
                    await bot.delete_message(chat_id=ticket["chat_id"], message_id=ticket["message_id"])
                    logging.info(f"Message for ticket {ticket_number} deleted.")
                except Exception as e:
                    logging.error(f"Failed to delete message for ticket {ticket_number}: {e}")

                remove_reminder(ticket_number)  # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
                del active_tickets[ticket_number]  # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫
                save_tickets()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                await message.reply(f"Ticket {ticket_number} was closed.")
            else:
                await message.reply(f"Ticket {ticket_number} not found.")


        # –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏
        if "opens" in message.text.lower():
            logging.info(f"{datetime.now().strftime('%H:%M %d.%m.%Y')}: Method \"opens\" triggered")
            formatted_tickets = json.dumps(active_tickets, indent=4, ensure_ascii=False)
            await bot.send_message(chat_id=chat_id, text=f"<pre>{formatted_tickets}</pre>", parse_mode="HTML")


        # –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
        if "bot help" in message.text.lower():
            logging.info(f"{datetime.now().strftime('%H:%M %d.%m.%Y')}: Method \"bot help\" triggered")
            
            help_text = (
                "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã**:\n"
                "1. **–û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É:**\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ `ticket open `<–Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏> —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ.\n"
                "   _–ü—Ä–∏–º–µ—Ä: ticket open 1234_\n\n"
                "2. **–ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É:**\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ `ticket close `<–Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏> —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ.\n"
                "   _–ü—Ä–∏–º–µ—Ä: ticket close 1234_\n\n"
                "3. **–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏:**\n"
                "   –ù–∞–ø–∏—à–∏—Ç–µ `opens` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π.\n"
            )

            await message.reply(help_text, parse_mode="Markdown")


# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---------------------------------------------------------

dp.include_router(router) # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
load_tickets() # –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫ –∏–∑ –ë–î
load_scheduler_jobs() # –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏–∑ –ë–î

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
async def run_scheduler():
    while True:
        await schedule.run_pending()
        await asyncio.sleep(1)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async def main():
    asyncio.create_task(run_scheduler())
    await dp.start_polling(bot)

if __name__ == "__main__":
    atexit.register(save_tickets)
    asyncio.run(main())
