import logging
import json
import atexit
import asyncio
import aioschedule as schedule
from config.config import TOKEN, REMINDER_INTERVAL, REMINDER_TOPIC_ID, STATUS_TOPIC_ID
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message


logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
active_tickets = {}
scheduled_jobs = {}

# --- –°–µ—Ä–≤–∏—Å—ã ---------------------------------------------------------

# –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞
def load_tickets():
    global active_tickets
    try:
        with open("tickets.json", "r") as file:
            active_tickets = json.load(file)
        logging.info("Tickets loaded successfully.")
    except FileNotFoundError:
        active_tickets = {}
        logging.info("No tickets file found. Starting fresh.")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –≤ —Ñ–∞–π–ª
def save_tickets():
    try:
        with open("tickets.json", "w") as file:
            json.dump(active_tickets, file, indent=4, ensure_ascii=False)
        logging.info("Tickets saved successfully.")
    except Exception as e:
        logging.error(f"Error saving tickets: {e}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫
def load_scheduler_jobs():
    for ticket_number in active_tickets:
        schedule_reminder(ticket_number)
        logging.info(f"Task for ticket {ticket_number} restored.")

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
def schedule_reminder(ticket_number):
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–µ –≤ —Å–ª–æ–≤–∞—Ä–µ
    job = schedule.every(REMINDER_INTERVAL).seconds.do(
        lambda: asyncio.create_task(send_reminder(ticket_number))
    )
    scheduled_jobs[ticket_number] = job
    logging.info(f"Reminder scheduled for ticket {ticket_number}.")

# –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def remove_reminder(ticket_number):
    job = scheduled_jobs.pop(ticket_number, None)
    if job:
        schedule.cancel_job(job)
        logging.info(f"Reminder for ticket {ticket_number} removed.")
    else:
        logging.warning(f"No reminder found for ticket {ticket_number}.")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_reminder(ticket_number: str):
    try:
        logging.info(f"send_reminder called for ticket {ticket_number}")
        ticket = active_tickets.get(ticket_number)
        if ticket:
            ticket["remind_times"] += 1
            start_time = datetime.strptime(ticket["start_time"], '%H:%M %d.%m.%Y')
            elapsed_time = datetime.now() - start_time  # –†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏
            elapsed_minutes = elapsed_time.total_seconds() // 60  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –º–∏–Ω—É—Ç—ã

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            sent_message = await bot.send_message(
                chat_id = ticket["chat_id"],
                text = f"{ticket_number} –ø—Ä–æ—à–ª–æ {int(elapsed_minutes)} –º–∏–Ω.",
                message_thread_id = REMINDER_TOPIC_ID
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            ticket["notification_messages"].append(sent_message.message_id)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É
            active_tickets[ticket_number] = ticket
            save_tickets()

            logging.info(f"Reminder sent for ticket {ticket_number}")
    except Exception as e:
        logging.error(f"Error in send_reminder for ticket {ticket_number}: {e}")


def date_time_formatter(start_time: str) -> str:
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç datetime
        start_time_obj = datetime.strptime(start_time, '%H:%M %d.%m.%Y')
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º "‚Äî"
        formatted_start_time = start_time_obj.strftime('%H:%M ‚Äî %d.%m.%Y')
        return formatted_start_time
    except Exception as e:
        logging.error(f"Error in date_time_formater: {e}")
        return start_time  # –í–æ–∑–≤—Ä–∞—Ç –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞


# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---------------------------------------------------------

@router.message()
async def handle_message(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –≥—Ä—É–ø–ø—ã –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
    if message.chat.type in ["group", "supergroup"]:
        logging.info(f"Message received from the group: {message.chat.title} | {message.text}")

        now = datetime.now().strftime('%H:%M %d.%m.%Y')
        chat_id = message.chat.id
        topic_id = message.message_thread_id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if message.text:
            message_text = message.text.lower()
        else:
            logging.warning("Received a message without text.")
            return


        # –û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É
        if "+ " in message_text:
            logging.info(f" === APP_LOG: {datetime.now().strftime('%H:%M %d.%m.%Y')}: topic_id={message.message_thread_id} Method=\"+ \"")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
            try:
                ticket_number = message_text.split("+ ")[1].split()[0]
            except IndexError as e:
                logging.error(f"Failed to extract ticket number: {e}")
                await message.reply("–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∑–∞—è–≤–∫–∞
            if ticket_number in active_tickets:
                logging.warning(f"Ticket {ticket_number} already exists.")
                await message.reply(f"Ticket {ticket_number} already exists.")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º—É –°—Ç–∞—Ç—É—Å
            opens_message_id = await bot.send_message(
                chat_id = chat_id,
                text = f"{ticket_number}\nüì• –æ—Ç–∫—Ä—ã—Ç –≤ {date_time_formatter(now)}",
                message_thread_id = STATUS_TOPIC_ID
            )

            active_tickets[ticket_number] = {
                "chat_id": chat_id,
                "message_thread_id": topic_id,
                "message_id": message.message_id,
                "opens_message_id": opens_message_id.message_id,
                "start_time": now,
                "remind_times": 0,
                "notification_messages": []
            }
            save_tickets()
            schedule_reminder(ticket_number)

            try:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å +
                await bot.delete_message(chat_id = chat_id, message_id=message.message_id)
                logging.info(f" === APP_LOG: Message for ticket {ticket_number} deleted.")
            except Exception as e:
                logging.error(f"Failed to delete message for ticket {ticket_number}: {e}")

        # –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É
        if "- " in message_text:
            logging.info(f" === APP_LOG: {datetime.now().strftime('%H:%M %d.%m.%Y')}: topic_id={message.message_thread_id} Method=\"- \"")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
            try:
                ticket_number = message_text.split("- ")[1].split()[0]
            except IndexError:
                await message.reply("I can't recognize the application number. Try again.")
                return

            if ticket_number in active_tickets:
                ticket = active_tickets[ticket_number]

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤ —Ç–µ–º—É –°—Ç–∞—Ç—É—Å
                await bot.edit_message_text(
                    chat_id = chat_id,
                    message_id = ticket['opens_message_id'],
                    text = f"{ticket_number}\nüì• –æ—Ç–∫—Ä—ã—Ç –≤ {date_time_formatter(ticket['start_time'])}\n‚úÖ –∑–∞–∫—Ä—ã—Ç –≤ {date_time_formatter(now)}",
                )

                try:
                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å + 
                    await bot.delete_message(chat_id=ticket["chat_id"], message_id=ticket["message_id"])
                    logging.info(f"Message for ticket {ticket_number} deleted.")
                except Exception as e:
                    logging.error(f"Failed to delete message for ticket {ticket_number}: {e}")

                # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è-–æ–ø–æ–≤–µ—â–µ–Ω–∏—è
                for msg_id in ticket.get("notification_messages", []):
                    try:
                        await bot.delete_message(chat_id=ticket["chat_id"], message_id=msg_id)
                        logging.info(f"Deleted notification message {msg_id} for ticket {ticket_number}")
                    except Exception as e:
                        logging.error(f"Failed to delete notification message {msg_id} for ticket {ticket_number}: {e}")

                remove_reminder(ticket_number)  # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
                del active_tickets[ticket_number]  # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫
                save_tickets()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

                try:
                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å - 
                    await bot.delete_message(chat_id=ticket["chat_id"], message_id=message.message_id)
                    logging.info(f" === APP_LOG: Message for ticket {ticket_number} deleted.")
                except Exception as e:
                    logging.error(f" === APP_LOG: Failed to delete message for ticket {ticket_number}: {e}")

            else:
                await message.reply(f"{ticket_number} –ù–µ –Ω–∞–π–¥–µ–Ω.")


        # –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏
        if "list" in message.text.lower():
            logging.info(f" === APP_LOG: {datetime.now().strftime('%H:%M %d.%m.%Y')}: topic_id={message.message_thread_id} Method=\"list\"")
            formatted_tickets = json.dumps(active_tickets, indent=4, ensure_ascii=False)
            await bot.send_message(
                chat_id = message.chat.id,
                text = f"<pre>{formatted_tickets}</pre>",
                parse_mode = "HTML",
                message_thread_id = message.message_thread_id
            )


        # –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
        if "bot help" in message.text.lower():
            logging.info(f" === APP_LOG: {datetime.now().strftime('%H:%M %d.%m.%Y')}: Method \"bot help\" triggered")
            
            help_text = (
                "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã**:\n"
                "1. **–û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É:**\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ `+ `<–Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏> —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ.\n"
                "   _–ü—Ä–∏–º–µ—Ä: + 1234_\n\n"
                "2. **–ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É:**\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ `- `<–Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏> —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ.\n"
                "   _–ü—Ä–∏–º–µ—Ä: - 1234_\n\n"
                "3. **–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏:**\n"
                "   –ù–∞–ø–∏—à–∏—Ç–µ `list` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π.\n"
            )

            await message.reply(help_text, parse_mode="Markdown")


        # –í–µ—Ä–Ω—É—Ç—å ID —Ç–æ–ø–∏–∫–∞
        if "tid" in message_text:
            logging.info(f" === APP_LOG: thread_id = {message.message_thread_id}")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---------------------------------------------------------

dp.include_router(router) # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
load_tickets() # –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫ –∏–∑ –ë–î
load_scheduler_jobs() # –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏–∑ –ë–î

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
async def run_scheduler():
    while True:
        await schedule.run_pending()
        await asyncio.sleep(1)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async def main():
    asyncio.create_task(run_scheduler())
    await dp.start_polling(bot)

if __name__ == "__main__":
    atexit.register(save_tickets)
    asyncio.run(main())
