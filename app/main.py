import os
import json
import atexit
import asyncio
import logging
import uuid

import httpx

import aioschedule as schedule
from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message
from datetime import datetime, UTC, timedelta
from dotenv import load_dotenv

from dataclasses import dataclass

logging.basicConfig(level=logging.INFO)

load_dotenv()  # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
# –ß—Ç–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
TOKEN = os.getenv("TOKEN")
REMINDER_INTERVAL = int(os.getenv("REMINDER_INTERVAL"))
REMINDER_TOPIC_ID = int(os.getenv("REMINDER_TOPIC_ID"))
STATUS_TOPIC_ID = int(os.getenv("STATUS_TOPIC_ID"))
BD_HOST = str(os.getenv("BD_HOST"))
LUCKYPAY_API_KEY = os.getenv("LUCKYPAY_API_KEY")
LUCKYPAY_URL = os.getenv("LUCKYPAY_URL")

bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
active_tickets = {}
scheduled_jobs = {}


@dataclass
class TicketFromAPI:
    client_name: str
    provider_name: str
    amount: str
    requisites: str
    provider_order_id: str
    message_id: int | None = None


def is_uuid(string: str) -> bool:
    try:
        uuid.UUID(string)
        return True
    except ValueError:
        return False


def now_utc3() -> datetime:
    return datetime.now(UTC) + timedelta(hours=3)


async def get_ticket_from_db(ticket_number: str) -> TicketFromAPI | None:
    for ticket in ticket_number.split():
        if is_uuid(ticket):  # –Ω–∞—à–∏ id –≤—Å–µ–≥–¥–∞ UUID
            try:
                async with httpx.AsyncClient() as http_client:
                    order_response = await http_client.get(
                        LUCKYPAY_URL + f"/api/v1/order/{ticket}",
                        headers={"X-API-Key": LUCKYPAY_API_KEY}
                    )
                    data = order_response.json()

                    logging.info(f"Response received from LuckyPay {data}")

                    order_response.raise_for_status()

                    data = data["order"]

                    provider_order_id = data["provider_order_id"]
                    provider_id = data["provider_id"]
                    client_id = data["client_id"]

                    provider_response = await http_client.get(
                        LUCKYPAY_URL + f"/api/v1/provider/{provider_id}",
                        headers={"X-API-Key": LUCKYPAY_API_KEY}
                    )

                    provider_name = provider_response.json()["name"]

                    client_response = await http_client.get(
                        LUCKYPAY_URL + f"/api/v1/client/{client_id}",
                        headers={"X-API-Key": LUCKYPAY_API_KEY}
                    )
                    client_name = client_response.json()["name"]

                    return TicketFromAPI(
                        provider_name=provider_name,
                        client_name=client_name,
                        amount=str(data["amount"]),
                        requisites=data["holder_account"],
                        provider_order_id=provider_order_id

                    )
            except Exception as e:
                logging.error(f" === APP_LOG: error getting ticket in luckypay db, ticket - {ticket} {e}")


# –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞
def load_tickets():
    global active_tickets
    try:
        with open(BD_HOST, "r", encoding='utf-8') as file:
            active_tickets = json.load(file)
        logging.info(f" === APP_LOG: Loaded Tickets ‚Äî successful: {active_tickets}")

    except FileNotFoundError:
        active_tickets = {}
        logging.info(" === APP_LOG: No tickets file found. Starting fresh.")


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –≤ —Ñ–∞–π–ª
def save_tickets():
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∑–∞–ø–∏—Å–∏
        with open(BD_HOST, "w", encoding="utf-8") as file:
            # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
            json.dump(active_tickets, file, indent=4, ensure_ascii=False)
        logging.info(" === APP_LOG: Tickets saved successfully.")
    except Exception as e:
        logging.error(f" === APP_LOG: Error saving tickets: {e}")


# –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫
def load_scheduler_jobs():
    for ticket_number in active_tickets:
        logging.info(f" === APP_LOG: Scheduler Job for ticket {ticket_number} restored.")
        schedule_reminder(ticket_number)
        logging.info(f" === APP_LOG: Loaded Scheduler Jobs ‚Äî successful")


# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
def schedule_reminder(ticket_number):
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–µ –≤ —Å–ª–æ–≤–∞—Ä–µ
    scheduled_jobs[ticket_number] = schedule.every(REMINDER_INTERVAL).seconds.do(
        lambda: asyncio.create_task(send_reminder(ticket_number))
    )
    logging.info(f" === APP_LOG: Scheduler Job for ticket \"{ticket_number}\" created.")


# –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def remove_reminder(ticket_number):
    job = scheduled_jobs.pop(ticket_number, None)
    if job:
        schedule.cancel_job(job)
        logging.info(f" === APP_LOG: Scheduler Job for ticket \"{ticket_number}\" removed.")
    else:
        logging.warning(f" === APP_LOG: Scheduler Job for ticket \"{ticket_number}\" not found.")


def count_elapsed_time(ticket: dict) -> int:
    start_time = datetime.strptime(ticket["start_time"], '%H:%M %d.%m.%Y').replace(tzinfo=UTC)
    elapsed_time = datetime.now(UTC) + timedelta(hours=3) - start_time  # –†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏
    return int(elapsed_time.total_seconds() // 60)


# –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_reminder(ticket_number: str) -> None:
    try:
        if (active_tickets[ticket_number]['remind_times'] * REMINDER_INTERVAL
                - REMINDER_INTERVAL != REMINDER_INTERVAL and
                active_tickets[ticket_number]['remind_times'] % 2 == 0
        ):
            # –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å 45 –º–∏–Ω—É—Ç –≤ 30 –º–∏–Ω—É—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            active_tickets[ticket_number]['remind_times'] += 1
            return

        logging.info(f" === APP_LOG: send_reminder called for ticket {ticket_number}")
        ticket = active_tickets.get(ticket_number)
        if ticket is None:
            logging.error(f" === APP_LOG: not found found ticket to send reminder")
            return
        ticket["remind_times"] += 1

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        sent_message = await bot.send_message(
            chat_id=ticket["chat_id"],
            text=f"{ticket_number} –ø—Ä–æ—à–ª–æ {count_elapsed_time(ticket)} –º–∏–Ω.",
            message_thread_id=REMINDER_TOPIC_ID
        )
        await remove_notifications(ticket, ticket_number)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        ticket["notification_messages"].append(sent_message.message_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É
        save_tickets()

        logging.info(f" === APP_LOG: Reminder sent for ticket {ticket_number}")
    except Exception as e:
        logging.error(f" === APP_LOG: Error in send_reminder for ticket {ticket_number}: {e}")


def date_time_formatter(start_time: str) -> str:
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç datetime
        start_time_obj = datetime.strptime(start_time, '%H:%M %d.%m.%Y')
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º "‚Äî"
        formatted_start_time = start_time_obj.strftime('%H:%M ‚Äî %d.%m.%Y')
        return formatted_start_time
    except Exception as e:
        logging.error(f" === APP_LOG: Error in date_time_formater: {e}")
        return start_time  # –í–æ–∑–≤—Ä–∞—Ç –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞


async def remove_notifications(
        ticket: dict,
        ticket_number: str,
) -> None:
    notification_messages = ticket.get("notification_messages", [])
    for msg_id in notification_messages:
        try:
            await bot.delete_message(chat_id=ticket["chat_id"], message_id=msg_id)
            logging.info(f" === APP_LOG: Deleted notification message {msg_id} for ticket {ticket_number}")
        except Exception as e:
            logging.error(
                f" === APP_LOG: Failed to delete notification message {msg_id} for ticket {ticket_number}: {e}")

    active_tickets[ticket_number]["notification_messages"] = []


async def close_ticket(
        ticket_number: str,
        chat_id: str,
        message: Message,
        sla: bool | None = False,
        change_status: bool | None = True
) -> None:
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–º–∞–Ω–¥–æ–π
        await bot.delete_message(chat_id=chat_id, message_id=message.message_id)
        logging.info(f" === APP_LOG: Message '{message.text}' for ticket {ticket_number} deleted.")
    except Exception as e:
        logging.error(f" === APP_LOG: Failed to delete '{message.text}' message for ticket {ticket_number}: {e}")

    if ticket_number not in active_tickets:
        logging.error(f" === APP_LOG: ticket {ticket_number} not found in active tickets")
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π
            await bot.delete_message(chat_id=chat_id, message_id=message.reply_to_message.message_id)
            logging.info(
                f" === APP_LOG: Message {message.reply_to_message.message_id} for ticket {ticket_number} deleted.")
        except Exception as e:
            logging.error(
                f" === APP_LOG: Failed to delete message {message.reply_to_message.message_id} for ticket {ticket_number}: {e}")

        return

    ticket = active_tickets[ticket_number]

    if change_status:
        text = (f"{ticket_number}\nüì• –æ—Ç–∫—Ä—ã—Ç –≤ {date_time_formatter(ticket['start_time'])}\n‚úÖ –∑–∞–∫—Ä—ã—Ç "
                f"–≤ {date_time_formatter(now_utc3().strftime('%H:%M %d.%m.%Y'))}")
        if sla:
            text += f"\nüü•SLA {count_elapsed_time(ticket)} –º–∏–Ω."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤ —Ç–µ–º—É –°—Ç–∞—Ç—É—Å
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=ticket['opens_message_id'],
            text=text
        )

    remove_reminder(ticket_number)  # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è-–æ–ø–æ–≤–µ—â–µ–Ω–∏—è
    await remove_notifications(ticket, ticket_number)
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
    try:
        await bot.delete_message(chat_id=chat_id, message_id=ticket["detail_message_id"])
    except Exception as e:
        logging.error(f" APP_LOG: Failed to delete detail message for ticket {ticket_number} {e}")
    del active_tickets[ticket_number]  # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫
    save_tickets()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    logging.info(f" === APP_LOG: Removed ticket {ticket_number}")

    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π
        await bot.delete_message(chat_id=chat_id, message_id=message.reply_to_message.message_id)
        logging.info(
            f" === APP_LOG: Message {message.reply_to_message.message_id} for ticket {ticket_number} deleted.")
    except Exception as e:
        logging.error(
            f" === APP_LOG: Failed to delete message {message.reply_to_message.message_id} for ticket {ticket_number}: {e}")


def get_ticket_from_reply(message: Message) -> str:
    """–ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã–∑–≤–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É–± –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç ticket number"""
    if message.reply_to_message is None:
        logging.warning(f"'{message.text}' command was used without reply")
        return
    if message.reply_to_message.caption is None:
        logging.warning(f"replied not to photo")
        return

    return " ".join(message.reply_to_message.caption.split())


# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---------------------------------------------------------
@router.message()
async def handle_message(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –≥—Ä—É–ø–ø—ã –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
    if message.chat.type in ["group", "supergroup"]:
        logging.info(f" === APP_LOG: Message received from the group: {message.chat.title} | {message.text}")
        now = now_utc3().strftime('%H:%M %d.%m.%Y')
        chat_id = message.chat.id
        topic_id = message.message_thread_id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if message.text is None:
            logging.warning("Received a message without text.")
            return

        # –û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É
        if message.text == "+":
            ticket_number = get_ticket_from_reply(message)

            if ticket_number is None:
                return

            chat_id = message.reply_to_message.chat.id
            topic_id = message.reply_to_message.message_thread_id

            if ticket_number in active_tickets:
                logging.warning(f"Ticket {ticket_number} already exists.")
                await message.reply(f"Ticket {ticket_number} already exists.")
            else:
                ticket = await get_ticket_from_db(ticket_number)

                if ticket is None:
                    logging.warning(f" === APP_LOG: no ticket got from db - {ticket_number} ")
                else:
                    try:
                        ticket.message_id = (await message.reply_to_message.reply(
                            f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {ticket.provider_name}\n–ú–µ—Ä—á–∞–Ω—Ç: {ticket.client_name}\n"
                            f"–°—É–º–º–∞: {ticket.amount}\n–†–µ–∫–≤–∏–∑–∏—Ç—ã: {ticket.requisites}\n\n"
                            f"{ticket.provider_order_id}"
                        )).message_id
                    except Exception:
                        logging.error(f" === APP_LOG: Failed to send detail message for ticket {ticket_number}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º—É –°—Ç–∞—Ç—É—Å
                opens_message_id = await bot.send_message(
                    chat_id=chat_id,
                    text=f"{ticket_number}\nüì• –æ—Ç–∫—Ä—ã—Ç –≤ {date_time_formatter(now)}",
                    message_thread_id=STATUS_TOPIC_ID
                )

                active_tickets[ticket_number] = {
                    "start_time": now,
                    "chat_id": chat_id,
                    "message_thread_id": topic_id,
                    "message_id": message.message_id,
                    "opens_message_id": opens_message_id.message_id,
                    "detail_message_id": ticket.message_id if ticket else None,
                    "remind_times": 0,
                    "notification_messages": []
                }
                save_tickets()
                schedule_reminder(ticket_number)

            try:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å +
                await bot.delete_message(chat_id=chat_id, message_id=message.message_id)
                logging.info(f" === APP_LOG: Message '{message.text}'for ticket {ticket_number} deleted.")
            except Exception as e:
                logging.error(f"Failed to delete message '{message.text}' for ticket {ticket_number}: {e}")

        elif message.text == "-":
            ticket_number = get_ticket_from_reply(message)

            logging.info(
                f" === APP_LOG: {now_utc3().strftime('%H:%M %d.%m.%Y')}: closing '{message.text}' method was used {ticket_number}")

            await close_ticket(ticket_number, chat_id, message)

        elif message.text == "!":
            ticket_number = get_ticket_from_reply(message)

            logging.info(
                f" === APP_LOG: {now_utc3().strftime('%H:%M %d.%m.%Y')}: closing '{message.text}' method was used {ticket_number}")

            await close_ticket(ticket_number, chat_id, message, sla=True)

        elif message.text.startswith("- "):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
            ticket_number = " ".join(message.text.split()[1:])

            logging.info(
                f" === APP_LOG: {datetime.now().strftime('%H:%M %d.%m.%Y')}: ticket={ticket_number} Method=\"- \"")

            try:
                await bot.delete_message(chat_id=chat_id, message_id=message.message_id)
                logging.info(f" === APP_LOG: Message for ticket {ticket_number} deleted.")
            except Exception as e:
                logging.error(f" === APP_LOG: Failed to delete message for ticket {ticket_number}: {e}")

            remove_reminder(ticket_number)

            if ticket_number in active_tickets:
                ticket = active_tickets.get(ticket_number)
                await remove_notifications(ticket, ticket_number)
                logging.info(
                    f" === APP_LOG reminder for ticket {ticket_number} deleted"
                )
        elif message.text.startswith("! "):
            logging.info(f" === APP_LOG: got '! ' command")
            ticket_number = " ".join(message.text.split()[1:])

            try:
                await bot.delete_message(chat_id=chat_id, message_id=message.message_id)
                logging.info(f" === APP_LOG: Message for ! ticket {ticket_number} deleted.")
            except Exception as e:
                logging.error(f" === APP_LOG: Failed to delete ! message for ticket {ticket_number}: {e}")

            await close_ticket(ticket_number, chat_id, message, sla=True)

        elif message.text.startswith("‚Äî "):
            logging.info(f' === APP_LOG: got -- command')
            ticket_number = " ".join(message.text.split()[1:])

            try:
                await bot.delete_message(chat_id=chat_id, message_id=message.message_id)
                logging.info(f" === APP_LOG: Message '--' for ticket {ticket_number} deleted.")
            except Exception as e:
                logging.error(f" === APP_LOG: Failed to delete message '--' for ticket {ticket_number}: {e}")

            await close_ticket(ticket_number, chat_id, message, change_status=False)

        elif message.text.startswith("‚Äî- "):
            logging.info(" === APP_LOG: got --- command")
            ticket_number = " ".join(message.text.split()[1:])

            try:
                await bot.delete_message(chat_id=chat_id, message_id=message.message_id)
                logging.info(f" === APP_LOG: Message '---' for ticket {ticket_number} deleted.")
            except Exception as e:
                logging.error(f" === APP_LOG: Failed to delete message '---' for ticket {ticket_number}: {e}")

            await close_ticket(ticket_number, chat_id, message)

        # –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏
        elif "delete" == message.text:
            try:
                await bot.delete_message(chat_id=chat_id, message_id=message.message_id)
                logging.info(f" === APP_LOG: Delete command deleted.")
            except Exception as e:
                logging.error(f" === APP_LOG: Failed to delete Delete command: {e}")
            try:
                await bot.delete_message(chat_id=chat_id, message_id=message.reply_to_message.message_id)
            except Exception:
                logging.error(f" === APP_LOG: Failed to delete message: {e}")


        elif "list" == message.text.lower():
            chunk_size = 4096
            json_data = json.dumps(active_tickets, ensure_ascii=False, indent=4)
            chunks = [json_data[i:i + chunk_size] for i in range(0, len(json_data), chunk_size)]

            # Send each chunk as a separate message
            for chunk in chunks:
                await bot.send_message(chat_id, chunk)

        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ tickets.json
        elif "dump" == message.text.lower():
            try:
                with open(BD_HOST, "r", encoding="utf-8") as file:
                    file_content = json.load(file)

                formatted_content = json.dumps(file_content, indent=4, ensure_ascii=False)

                await bot.send_message(
                    chat_id=message.chat.id,
                    text=f"<pre>{formatted_content}</pre>",
                    parse_mode="HTML",
                    message_thread_id=message.message_thread_id
                )
            except FileNotFoundError:
                logging.error(" === APP_LOG: tickets.json file not found.")
            except json.JSONDecodeError as e:
                logging.error(f" === APP_LOG: Error decoding tickets.json: {e}")
            except Exception as e:
                logging.error(f" === APP_LOG: Unexpected error while reading tickets.json: {e}")

        # –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
        elif "bot help" == message.text.lower():
            logging.info(f" === APP_LOG: {now_utc3().strftime('%H:%M %d.%m.%Y')}: Method \"bot help\" triggered")

            help_text = (
                "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã**:\n"
                "1. **–û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É:**\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ `+ `<–Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏> —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ.\n"
                "   _–ü—Ä–∏–º–µ—Ä: + 1234_\n\n"
                "2. **–ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É:**\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ `- `<–Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏> —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ.\n"
                "   _–ü—Ä–∏–º–µ—Ä: - 1234_\n\n"
                "3. **–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏:**\n"
                "   –ù–∞–ø–∏—à–∏—Ç–µ `list` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π.\n"
            )

            await message.reply(help_text, parse_mode="Markdown")

        # –í–µ—Ä–Ω—É—Ç—å ID —Ç–æ–ø–∏–∫–∞
        elif "tid" == message.text:
            logging.info(f" === APP_LOG: thread_id = {message.message_thread_id}")


# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---------------------------------------------------------

logging.info(f" === APP_LOG: Inited Router  ‚Äî {dp.include_router(router)}")  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
load_tickets()  # –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫ –∏–∑ –ë–î
load_scheduler_jobs()  # –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏–∑ –ë–î


# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
async def run_scheduler():
    while True:
        for job in schedule.jobs:
            if job.should_run:
                await asyncio.create_task(job.run())
        await asyncio.sleep(1)


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async def main():
    asyncio.create_task(run_scheduler())
    await dp.start_polling(bot)


if __name__ == "__main__":
    atexit.register(save_tickets)
    asyncio.run(main())
